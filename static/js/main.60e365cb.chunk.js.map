{"version":3,"sources":["reducers/algorithms/index.js","actions/setAlgorithm/index.js","actions/setSimulationRunning/index.js","actions/displayArray/index.js","actions/setAnimationSpeed/index.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/countingSort.js","helpers/animator.js","helpers/arrayGenerator.js","reducers/displayArray/index.js","reducers/index.js","reducers/setAlgorithm/index.js","reducers/setSimulationRunning/index.js","reducers/setAnimationSpeed/index.js","store.js","components/settings-bar/settings-bar.jsx","components/visualizer/visualizer.jsx","App.js","index.js"],"names":["INITIAL_STATE","name","setAlgorithm","algorithm","type","payload","setSimulationRunning","simulationRunning","setDisplayArray","array","minValue","maxValue","setAnimationSpeed","animationSpeed","getSelectionSortAnimations","animations","length","arrayLength","i","jMin","push","animationState","AnimationState","MARKED","data","j","SELECT","NORMAL","SWAP","indexOne","indexTwo","SORTED","selectionSort","getBubbleSortAnimations","n","swapped","bubbleSort","getInsertionSortAnimations","markAsSorted","insertionSort","getMergeSortAnimations","mergeSort","firstArray","secondArray","startIndex","endIndex","centerIndex","Math","floor","markedPartition","k","list1_pos","list2_pos","subList","SETSUBLIST","index","value","indices","MERGESUBLIST","merge","slice","getQuickSortAnimations","quickSort","lo","hi","p","pivot","partition","getHeapSortAnimations","count","start","siftDown","heapify","end","heapSort","root","child","swap","getCountingSortAnimations","countArray","Array","fill","REPLACE","countingSort","Object","freeze","simRunning","startSorting","algorithmName","dispatch","displayArray","store","getState","map","item","algorithmInput","sortingFunction","unsubscribeListener","subscribe","animate","animation","pop","changeBarState","replace","setSubList","mergeSublist","setTimeout","reverse","ArrayType","generateNewArray","min","max","amount","arrayType","RANDOM","newArray","generateRandomInt","state","SEQUENCE","shuffleArray","ceil","random","isSublist","sublistValue","combineReducers","algorithms","selectedAlgorithm","action","tmp","createStore","reducers","SettingsBar","props","handleOnChangeBars","e","setState","amountBars","target","handleInputOnBlurBars","handleOnChangeSpeed","handleInputOnBlurSpeed","handleOnChangeAlgorithm","selectedAlg","this","id","Slider","className","text","disabled","blur","change","SettingsButton","passedFunction","renderDropdown","stop","opts","key","onChange","React","Component","onBlur","onKeyDown","onClick","style","borderBottom","connect","bindActionCreators","COLOR_SUBLIST","DisplayMode","Visualizer","displayMode","UP","alignItems","CENTER","DOWN","renderArrayElements","barMargin","barWidth","barHeighMultiplier","styleAlignItems","obj","bg","MOVE","barStyle","width","height","marginLeft","marginRight","backgroundColor","gradient","extra","subListPercentage","sublistHalf","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60e365cb.chunk.js","sourcesContent":["/* ***********************************************************************\r\n * index.js (reducers/algorithms)\r\n * -----------------------------------------------------------------------\r\n * File containing a reducer containing a static list of \r\n * sorting algorithms.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nconst INITIAL_STATE = (\r\n    [\r\n        { name: 'Selection Sort' },\r\n        { name: 'Bubble Sort' },\r\n        { name: 'Insertion Sort' },\r\n        { name: 'Merge Sort' },\r\n        { name: 'Quick Sort' },\r\n        { name: 'Heap Sort' },\r\n        { name: 'Counting Sort' }\r\n    ]\r\n);\r\n\r\n/* algorithmsReducer (reducer)\r\n * -------------------------------------------------------------\r\n * Reducer containing names of all supported sorting algorithms.\r\n * -------------------------------------------------------------\r\n * Input:    None\r\n * Output:   INITIAL_STATE\r\n */\r\nexport const algorithmsReducer = () => {\r\n    return INITIAL_STATE;\r\n}","/* ***********************************************************************\r\n * index.js (actions/setAlgorithm)\r\n * -----------------------------------------------------------------------\r\n * Contains available actions for the setAlgorithmReducer.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\n// Available action types\r\nexport const SET_ALGORITHM  = 'SET_ALGORITHM';\r\n\r\n/* setAlgorithm (action)\r\n * -------------------------------------------------------------\r\n * Action used to set a the current sorting algorithm that is\r\n * to be used.\r\n * -------------------------------------------------------------\r\n * Input:    (algorithm): The name of the algorithm to set\r\n * Output:   Type, Payload\r\n */\r\nexport const setAlgorithm = (algorithm) => {\r\n    return {\r\n        type: SET_ALGORITHM,\r\n        payload: algorithm\r\n    };\r\n};","/* ***********************************************************************\r\n * index.js (actions/setSimulationRunning)\r\n * -----------------------------------------------------------------------\r\n * Contains available actions for the setSimulationRunningReducer.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\n// Available action types\r\nexport const CHANGE_SIMULATION_STATE  = 'CHANGE_SIMULATION_STATE';\r\n\r\n/* setSimulationRunning (action)\r\n * -------------------------------------------------------------\r\n * Action used to set if the simulation is running or not.\r\n * -------------------------------------------------------------\r\n * Input:    (simulationRunning): Bool determining if the\r\n *              simulation is running or not\r\n * Output:   Type, Payload\r\n */\r\nexport const setSimulationRunning = (simulationRunning) => {\r\n    return {\r\n        type: CHANGE_SIMULATION_STATE,\r\n        payload: simulationRunning\r\n    };\r\n};","/* ***********************************************************************\r\n * index.js (actions/displayArray)\r\n * -----------------------------------------------------------------------\r\n * Contains available actions for the displayArrayReducer.\r\n * Note: AnimationState resides in animator.js.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\n// Available action types\r\nexport const SET_DISPLAY_ARRAY  = 'SET_DISPLAY_ARRAY';\r\nexport const CHANGE_BAR_STATE   = 'CHANGE_BAR_STATE';\r\nexport const SWAP               = 'SWAP';\r\nexport const REPLACE            = 'REPLACE';\r\nexport const SET_SUBLIST        = 'SET_SUBLIST';\r\nexport const MERGE_SUBLIST      = 'MERGE_SUBLIST';\r\n\r\n/* setDisplayArray (action)\r\n * -------------------------------------------------------------\r\n * Action used to set a new display array.\r\n * -------------------------------------------------------------\r\n * Input:    (array):       Array to set\r\n *           (type):        Type of the array\r\n *           (minValue):    Minimum int value in the array\r\n *           (maxValue):    Maximum int value in the array\r\n * Output:   Type, Payload\r\n */\r\nexport const setDisplayArray = (array, type, minValue, maxValue) => {\r\n    return {\r\n        type: SET_DISPLAY_ARRAY,\r\n        payload: { array, type, minValue, maxValue }\r\n    };\r\n};\r\n\r\n/* changeBarState (action)\r\n * -------------------------------------------------------------\r\n * Changes the state of array elements (bars) by indices.\r\n * Possible states are: \r\n *      AnimationState.NORMAL\r\n *      AnimationState.SELECT\r\n *      AnimationState.MARKED\r\n *      AnimationState.SORTED\r\n * -------------------------------------------------------------\r\n * Input:    (animation): { \r\n *              animationState: AnimationState,\r\n *              data: [ind1, ind2, ...]\r\n *           }\r\n * Output:   Type, Payload\r\n */\r\nexport const changeBarState = (animation) => {\r\n    return {\r\n        type: CHANGE_BAR_STATE,\r\n        payload: animation\r\n    };\r\n};\r\n\r\n/* swap (action)\r\n * -------------------------------------------------------------\r\n * Swaps position of two array elements(indices).\r\n * -------------------------------------------------------------\r\n * Input:    (animation): { \r\n *              animationState: AnimationState.SWAP,\r\n *              data: [indexOne: ?, indexTwo: ?] (bar indices to swap)\r\n *           }\r\n * Output:   Type, Payload\r\n */\r\nexport const swap = (animation) => {\r\n    return {\r\n        type: SWAP,\r\n        payload: animation\r\n    };\r\n};\r\n\r\n/* replace (action)\r\n * -------------------------------------------------------------\r\n * Replaces an array element value with another.\r\n * -------------------------------------------------------------\r\n * Input:    (animation): { \r\n *              animationState: AnimationState.REPLACE,\r\n *              data: [index: ?, value: ?]\r\n *           }\r\n * Output:   Type, Payload\r\n */\r\nexport const replace = (animation) => {\r\n    return {\r\n        type: REPLACE,\r\n        payload: animation\r\n    };\r\n};\r\n\r\n/* setSubList (action)\r\n * -------------------------------------------------------------\r\n * Sets sublist values for indices.\r\n * -------------------------------------------------------------\r\n * Input:    (animation): { \r\n *              animationState: AnimationState.SETSUBLIST,\r\n *              data: [{index: ?, value: ?}, {index: ?, value: ?}]\r\n *           }\r\n * Output:   Type, Payload\r\n */\r\nexport const setSubList = (animation) => {\r\n    return {\r\n        type: SET_SUBLIST,\r\n        payload: animation\r\n    };\r\n};\r\n\r\n/* mergeSublist (action)\r\n * -------------------------------------------------------------\r\n * Merges an existing sublist into the primary values.\r\n * -------------------------------------------------------------\r\n * Input:    (animation): { \r\n *              animationState: AnimationState.MERGESUBLIST,\r\n *              data: [ind1, ind2, ...]\r\n *           }\r\n * Output:   Type, Payload\r\n */\r\nexport const mergeSublist = (animation) => {\r\n    return {\r\n        type: MERGE_SUBLIST,\r\n        payload: animation\r\n    };\r\n};","/* ***********************************************************************\r\n * index.js (actions/setAnimationSpeed)\r\n * -----------------------------------------------------------------------\r\n * Contains available actions for the setAnimationSpeedReducer.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\n// Available action types\r\nexport const SET_ANIMATION_SPEED  = 'SET_ANIMATION_SPEED';\r\n\r\n/* setAnimationSpeed (action)\r\n * -------------------------------------------------------------\r\n * Action used to set the animation speed.\r\n * -------------------------------------------------------------\r\n * Input:    (animationSpeed): The animation speed (in ms)\r\n * Output:   Type, Payload\r\n */\r\nexport const setAnimationSpeed = (animationSpeed) => {\r\n    return {\r\n        type: SET_ANIMATION_SPEED,\r\n        payload: animationSpeed\r\n    };\r\n};","/* ***********************************************************************\r\n * selectionSort.js\r\n * -----------------------------------------------------------------------\r\n * Selection sort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getSelectionSortAnimations\r\n * -------------------------------------------------------------\r\n * Calls selection sort in order to sort the input array and\r\n * create an animation array used to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n * Output:   Array of animations\r\n */\r\nexport function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) { return animations; }\r\n    selectionSort(array, animations);\r\n    return animations;\r\n}\r\n\r\n/* selectionSort\r\n * -------------------------------------------------------------\r\n * Selection sort implementation modified to fill an array of\r\n * animations that can be used to visualizer the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n *           (animations): Array of animations\r\n * Output:   None (modifies the animations array by reference)\r\n */\r\nfunction selectionSort(array, animations) {\r\n    let arrayLength = array.length;\r\n    for(let i = 0; i < arrayLength - 1; i++) {\r\n        let jMin = i;\r\n        // We mark the current smallest element\r\n        animations.push({ animationState: AnimationState.MARKED, data: [jMin] });\r\n        for(let j = i + 1; j < arrayLength; j++) {\r\n            animations.push({ animationState: AnimationState.SELECT, data: [j] });\r\n            if (array[j] < array[jMin]) {\r\n                // Change the marking to the new smallest item\r\n                animations.push({ animationState: AnimationState.NORMAL, data: [jMin] });\r\n                animations.push({ animationState: AnimationState.MARKED, data: [j] });\r\n                jMin = j;\r\n            } else {  \r\n                animations.push({ animationState: AnimationState.NORMAL, data: [j] });\r\n            }\r\n        }\r\n        if (jMin !== i) {\r\n            animations.push({ animationState: AnimationState.SELECT, data: [i, jMin] });\r\n            animations.push({ animationState: AnimationState.SWAP, data: {indexOne: i, indexTwo: jMin} });\r\n            animations.push({ animationState: AnimationState.NORMAL, data: [i, jMin] });\r\n            [array[i], array[jMin]] = [array[jMin], array[i]];\r\n        }\r\n        animations.push({ animationState: AnimationState.SORTED, data: [i] });\r\n    }\r\n    // Last element is in order\r\n    animations.push({ animationState: AnimationState.SORTED, data: [arrayLength-1] });\r\n}","/* ***********************************************************************\r\n * bubbleSort.js\r\n * -----------------------------------------------------------------------\r\n * Bubble sort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getBubbleSortAnimations\r\n * -------------------------------------------------------------\r\n * Calls bubble sort in order to sort the input array and\r\n * create an animation array used to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n * Output:   Array of animations\r\n */\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) { return animations; }\r\n  bubbleSort(array, animations);\r\n  return animations;\r\n}\r\n\r\n/* bubbleSort\r\n * -------------------------------------------------------------\r\n * Bubble sort implementation modified to fill an array of\r\n * animations that can be used to visualizer the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n *           (animations): Array to push animations to\r\n * Output:   None (modifies the animations array by reference)\r\n */\r\nfunction bubbleSort(array, animations) {\r\n  let n = array.length;\r\n  let swapped = false;\r\n  do {\r\n    swapped = false;\r\n    n = n - 1;\r\n    for(let i = 0; i < n; i++) {\r\n      animations.push({ animationState: AnimationState.SELECT, data: [i, i + 1] });\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push({ animationState: AnimationState.SWAP, data: {indexOne: i, indexTwo: i + 1} });\r\n        [array[i], array[i + 1]] = [array[i + 1], array[i]];\r\n        swapped = true;     \r\n      }\r\n      animations.push({ animationState: AnimationState.NORMAL, data: [i, i + 1] });     \r\n    }\r\n    if(swapped === false) {\r\n      // Rest of elements are in order. Mark them as sorted.\r\n      for(let j = 0; j < n+1; j++) { \r\n        animations.push({ animationState: AnimationState.SORTED, data: [j] }); \r\n      }\r\n    } else {    \r\n      animations.push({ animationState: AnimationState.SORTED, data: [n] });\r\n    }\r\n  } while(swapped);\r\n}","/* ***********************************************************************\r\n * insertionSort.js\r\n * -----------------------------------------------------------------------\r\n * Insertion sort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getInsertionSortAnimations\r\n * -------------------------------------------------------------\r\n * Calls insertion sort in order to sort the input array and\r\n * create an animation array used to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n * Output:   Array of animations\r\n */\r\nexport function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) { return animations; }\r\n    insertionSort(array, animations);\r\n    return animations;\r\n}\r\n\r\n/* insertionSort\r\n * -------------------------------------------------------------\r\n * Insertion sort implementation modified to fill an array of\r\n * animations that can be used to visualizer the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n *           (animations): Array of animations\r\n * Output:   None (modifies the animations array by reference)\r\n */\r\nfunction insertionSort(array, animations) {\r\n    for(let i = 1; i < array.length; i++) {\r\n        for(let j = i; j > 0; j--) {\r\n            animations.push({ animationState: AnimationState.SELECT, data: [j - 1, j] });\r\n            if (array[j - 1] > array[j]) {\r\n                animations.push({ animationState: AnimationState.SWAP, data: {indexOne: j - 1, indexTwo: j} });\r\n                [array[j - 1], array[j]] = [array[j], array[j - 1]];\r\n                animations.push({ animationState: AnimationState.NORMAL, data: [j - 1, j] });\r\n            } else {\r\n                animations.push({ animationState: AnimationState.NORMAL, data: [j - 1, j] });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // Mark all items as sorted\r\n    let markAsSorted = [];\r\n    for(let i = 0; i < array.length; i++) {\r\n        markAsSorted.push(i);\r\n    }\r\n    animations.push({ animationState: AnimationState.SORTED, data: markAsSorted });\r\n}","/* ***********************************************************************\r\n * mergeSort.js\r\n * -----------------------------------------------------------------------\r\n * MergeSort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getMergeSortAnimations\r\n * -------------------------------------------------------------\r\n * Performs merge sort and returns an array of animations.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n *           (animations): Array of animations\r\n * Output:   Array of animations\r\n */\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) { return animations; }\r\n  mergeSort(array.slice(), array.slice(), animations, 0, array.length - 1);\r\n  return animations;\r\n}\r\n\r\n/* mergeSort\r\n * -------------------------------------------------------------\r\n * Merge sort implementation focused on returning animations \r\n * that later can be interpreted to visualize the \r\n * merge sort algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (firstArray): Array reference\r\n *           (secondArray): Array reference\r\n *           (animations): Array to push animations to\r\n *           (startIndex): Start index where the partition of\r\n *              the array begins\r\n *           (endIndex): End index where the partition of \r\n *              the array ends\r\n * Output:   None (changes animations by reference)\r\n */\r\nfunction mergeSort(firstArray, secondArray, animations, startIndex, endIndex) {\r\n  // Basecase\r\n  if (startIndex === endIndex) { return; }\r\n  // Split the lists into parts, then merge them\r\n  // (we alternate between the arrays and recursively write results to secondArray)\r\n  let centerIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSort(secondArray, firstArray, animations, startIndex, centerIndex);\r\n  mergeSort(secondArray, firstArray, animations, centerIndex + 1, endIndex);\r\n  merge(firstArray, secondArray, animations, startIndex, centerIndex, endIndex);\r\n}\r\n\r\n/* merge\r\n * -------------------------------------------------------------\r\n * Performs the merge step in the merge sort implementation.\r\n * -------------------------------------------------------------\r\n * Input:  (firstArray): Array reference\r\n *         (secondArray): Array reference\r\n *         (animations): Array to push animations to\r\n *         (startIndex): Start index where the partition of\r\n *            the array begins\r\n *         (centerIndex): Center index of the array partition\r\n *         (endIndex): End index where the partition of\r\n *            the array ends\r\n * Output: None (modifies the animations array by reference)\r\n */\r\nfunction merge(firstArray, secondArray, animations, startIndex, centerIndex, endIndex) {\r\n  // Mark the partion list (the part we are working on)\r\n  const markedPartition = [];\r\n  for (let i = startIndex; i <= (endIndex); i++) { markedPartition.push(i); }\r\n  animations.push({ animationState: AnimationState.MARKED, data: markedPartition });\r\n  // Loop variables\r\n  let k = startIndex;\r\n  let list1_pos = startIndex;\r\n  let list2_pos = centerIndex + 1;\r\n  // Sublist tracker\r\n  const subList = [];\r\n  // Compare while both lists have comparable values\r\n  while(list1_pos <= centerIndex && list2_pos <= endIndex) {\r\n    if (secondArray[list1_pos] <= secondArray[list2_pos]) {  \r\n      animations.push({ animationState: AnimationState.MARKED, data: [k] });\r\n      animations.push({ animationState: AnimationState.SETSUBLIST, data: [{index: k, value: secondArray[list1_pos]}] });\r\n      subList.push({index: k, value: secondArray[list1_pos]});\r\n      firstArray[k++] = secondArray[list1_pos++];\r\n    } else {\r\n      animations.push({ animationState: AnimationState.MARKED, data: [k] });\r\n      animations.push({ animationState: AnimationState.SETSUBLIST, data: [{index: k, value: secondArray[list2_pos]}] });\r\n      subList.push({index: k, value: secondArray[list2_pos]});\r\n      firstArray[k++] = secondArray[list2_pos++];\r\n    }\r\n  }\r\n  // Add leftover elements\r\n  while(list1_pos <= centerIndex) {\r\n    animations.push({ animationState: AnimationState.SETSUBLIST, data: [{index: k, value: secondArray[list1_pos]}] });\r\n    subList.push({index: k, value: secondArray[list1_pos]});\r\n    firstArray[k++] = secondArray[list1_pos++];\r\n  }\r\n  while(list2_pos <= endIndex) {\r\n    animations.push({ animationState: AnimationState.SETSUBLIST, data: [{index: k, value: secondArray[list2_pos]}] });\r\n    subList.push({index: k, value: secondArray[list2_pos]});\r\n    firstArray[k++] = secondArray[list2_pos++];\r\n  }\r\n  // Replace with sublist, then unmark partition\r\n  let indices = [];\r\n  for (let i = 0; i < subList.length; i++) { indices.push(subList[i].index); }\r\n  animations.push({ animationState: AnimationState.MERGESUBLIST, data: indices });\r\n  animations.push({ animationState: AnimationState.NORMAL, data: markedPartition });\r\n  // Mark as sorted if final lap\r\n  if (startIndex + endIndex === firstArray.length - 1) {\r\n    animations.push({ animationState: AnimationState.SORTED, data: markedPartition });\r\n  }\r\n}","/* ***********************************************************************\r\n * quickSort.js\r\n * -----------------------------------------------------------------------\r\n * QuickSort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getQuickSortAnimations\r\n * -------------------------------------------------------------\r\n * Quick sort implementation focused on returning animations\r\n * that later can be interpreted to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n * Output:   Array of animations\r\n */\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) { return animations; }\r\n  quickSort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n/* quickSort\r\n * -------------------------------------------------------------\r\n * Quick sort implementation. Uses the Lomuto partition scheme.\r\n * Modified to run appropiate animations properly.\r\n * -------------------------------------------------------------\r\n * Input:   (array): The array to sort\r\n *          (lo): Index determining where the array starts\r\n *          (hi): Index determining where the array ends\r\n *          (animations): Animation array to add animations to\r\n * Output:  None (changes array by calling sub-functions)\r\n */\r\nfunction quickSort(array, lo, hi, animations) {\r\n  if (lo <= hi) {\r\n    let p = partition(array, lo, hi, animations);\r\n    quickSort(array, lo, p - 1, animations);\r\n    quickSort(array, p + 1, hi, animations);\r\n  }\r\n}\r\n\r\n/* partition\r\n * -------------------------------------------------------------\r\n * Reorder the array so that all values less then the pivot\r\n * comes before the pivot, and all values greater then then the\r\n * pivot comes after the pivot.\r\n * -------------------------------------------------------------\r\n * Input:   (array): The array to partition\r\n *          (lo): Index determining where the array starts\r\n *          (hi): Index determining where the array ends\r\n *          (animations): Animation array to add animations to\r\n * Output:  Next index used for partitioning\r\n */\r\nfunction partition(array, lo, hi, animations) {\r\n  let pivot = array[hi];\r\n  let i = lo;\r\n  animations.push({ animationState: AnimationState.MARKED, data: [hi] });\r\n  for(let j = lo; j < hi; j++) {\r\n    animations.push({ animationState: AnimationState.SELECT, data: [i, j] });\r\n    if(array[j] < pivot) {      \r\n      animations.push({ animationState: AnimationState.SWAP, data: {indexOne: i, indexTwo: j} });\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n      animations.push({ animationState: AnimationState.NORMAL, data: [i, j] });\r\n      i = i + 1;\r\n    } else {\r\n      animations.push({ animationState: AnimationState.NORMAL, data: [i, j] });\r\n    }\r\n  }\r\n  // Push animations  \r\n  animations.push({ animationState: AnimationState.SELECT, data: [i, hi] });\r\n  animations.push({ animationState: AnimationState.SWAP, data: {indexOne: i, indexTwo: hi} });\r\n  animations.push({ animationState: AnimationState.NORMAL, data: [hi] });\r\n  animations.push({ animationState: AnimationState.SORTED, data: [i] });\r\n  // Swap the elements\r\n  [array[i], array[hi]] = [array[hi], array[i]];\r\n  return i;\r\n}","/* ***********************************************************************\r\n * heapSort.js\r\n * -----------------------------------------------------------------------\r\n * HeapSort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getHeapSortAnimations\r\n * -------------------------------------------------------------\r\n * Performs heap sort and returns an array of animations.\r\n * -------------------------------------------------------------\r\n * Input:   (array): An array of unsorted integer values\r\n * Output:  Array of animations\r\n */\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) { return animations; }\r\n    heapSort(array, animations);\r\n    return animations;\r\n}\r\n\r\n/* heapSort\r\n * -------------------------------------------------------------\r\n * Heap sort implementation focused on returning animations that\r\n * later can be interpreted to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:   (array): An array of unsorted integer values\r\n *          (animations): Array to push animations to\r\n * Output:  None (modifies the animations array by reference)\r\n */\r\nfunction heapSort(array, animations) {\r\n  // Build a max heap\r\n  heapify(array, animations);\r\n  let end = array.length - 1;\r\n  while (end > 0) {\r\n    // Push SWAP animation and then swap the actual elements\r\n    animations.push({ animationState: AnimationState.SELECT, data: [end, 0] });\r\n    animations.push({ animationState: AnimationState.SWAP, data: { indexOne: end, indexTwo: 0 }});\r\n    //animations.push({ animationState: AnimationState.NORMAL, data: [end, 0] });\r\n    animations.push({ animationState: AnimationState.SORTED, data: [end] });\r\n    [array[end], array[0]] = [array[0], array[end]];\r\n    end = end - 1;\r\n    // Sift the new first-element to its appropriate index\r\n    siftDown(array, 0, end, animations);\r\n    // If last element\r\n    if (end === 0) { animations.push({ animationState: AnimationState.SORTED, data: [end] }); }\r\n  }\r\n}\r\n\r\n/* heapify\r\n * -------------------------------------------------------------\r\n * Builds a heap of the input elements.\r\n * -------------------------------------------------------------\r\n * Input:   (array): An array of unsorted integer values\r\n *          (animations): Array to push animations to\r\n * Output:  None\r\n */\r\nfunction heapify(array, animations) {\r\n  let count = array.length - 1;\r\n  let start = Math.floor(count - 1 / 2);\r\n  while (start >= 0) {\r\n    siftDown(array, start, count, animations);\r\n    start = start - 1;\r\n  }\r\n}\r\n\r\n/* siftDown\r\n * -------------------------------------------------------------\r\n * Sift elements to their appropiate places in the heap.\r\n * -------------------------------------------------------------\r\n * Input:   (array): An array of unsorted integer values\r\n *          (start): Start index\r\n *          (end): End index\r\n *          (animations): Array to push animations to\r\n * Output: None (changes animations by reference)\r\n */\r\nfunction siftDown(array, start, end, animations) {\r\n  let root = start;\r\n  while (2 * root + 1 <= end) {\r\n    // Get left child of root\r\n    let child = 2 * root + 1;\r\n    // Keep track on child to swap with\r\n    let swap = root;\r\n    animations.push({ animationState: AnimationState.SELECT, data: [swap, child] });\r\n    animations.push({ animationState: AnimationState.NORMAL, data: [swap, child] });\r\n    if (array[swap] < array[child]) {\r\n      swap = child;\r\n    }\r\n    // If there is a right child that is greater\r\n    if (child + 1 <= end) { \r\n      animations.push({ animationState: AnimationState.SELECT, data: [swap, child + 1] }); \r\n      animations.push({ animationState: AnimationState.NORMAL, data: [swap, child + 1] });\r\n      if (array[swap] < array[child + 1]) {\r\n        swap = child + 1;\r\n      }\r\n    }\r\n    // If the largest element is the root, we are done\r\n    if (swap === root) {\r\n      return;\r\n    } else {\r\n      // Push SWAP animation and then swap the actual elements\r\n      animations.push({ animationState: AnimationState.SWAP, data: { indexOne: root, indexTwo: swap }});   \r\n      animations.push({ animationState: AnimationState.NORMAL, data: [root, swap] });\r\n      [array[root], array[swap]] = [array[swap], array[root]];\r\n      root = swap;\r\n    }\r\n  }\r\n}","/* ***********************************************************************\r\n * countingSort.js\r\n * -----------------------------------------------------------------------\r\n * Counting sort algorithm implementation focused on generating an array\r\n * of animations of the sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../helpers/animator';\r\n\r\n/* getCountingSortAnimations\r\n * -------------------------------------------------------------\r\n * Calls counting sort in order to sort the input array and\r\n * create an animation array used to visualize the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (data): An object containing the array to sort and\r\n *              the maximum value that the array can contain\r\n * Output:   Array of animations\r\n */\r\nexport function getCountingSortAnimations(data) {\r\n    const animations = [];\r\n    if (data.array.length <= 1) { return animations; }\r\n    countingSort(data.array, data.maxValue, animations);\r\n    return animations;\r\n}\r\n\r\n/* countingSort\r\n * -------------------------------------------------------------\r\n * Counting sort implementation modified to fill an array of\r\n * animations that can be used to visualizer the algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (array): An array of unsorted integer values\r\n *           (maxValue): The maximum value that the array can \r\n *              contain\r\n *           (animations): Array of animations\r\n * Output:   None (modifies the animations array by reference)\r\n */\r\nfunction countingSort(array, maxValue, animations) {\r\n    // Create the count array containing a spot for each number that can occur\r\n    let countArray = new Array(maxValue).fill(0);\r\n    // Store the count of each number\r\n    for(let i = 0; i < array.length; ++i) {\r\n        animations.push({ animationState: AnimationState.SELECT, data: [i] });\r\n        ++countArray[array[i]];\r\n        animations.push({ animationState: AnimationState.NORMAL, data: [i] });\r\n    }\r\n    // Make sure that numbers are at correct indices\r\n    for(let i = 1; i <= countArray.length-1; ++i) {\r\n        countArray[i] += countArray[i-1];\r\n    }\r\n    // Build the output array\r\n    for(let i = array.length - 1; i >= 0; i--) {      \r\n        animations.push({ animationState: AnimationState.SELECT, data: [countArray[array[i]]-1] });\r\n        animations.push({ animationState: AnimationState.REPLACE, data: { index: countArray[array[i]]-1, value: array[i]} });\r\n        animations.push({ animationState: AnimationState.SORTED, data: [countArray[array[i]]-1] });\r\n        --countArray[array[i]];\r\n    }\r\n}","/* ***********************************************************************\r\n * animator.js\r\n * -----------------------------------------------------------------------\r\n * The purpose of the animator is to execute a sorting algorithm\r\n * and to dispatch the animations returned by the sorting algorithm in\r\n * order for the visualizer to display them.\r\n * Thus, the flow is as follows:\r\n *      1. Run the given sorting algorithm, resulting in a returned\r\n *          array of animations.\r\n *      2. Dispatch each animation with the help of a timer, resulting in\r\n *          that the visualizer displays the animations.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\n// Redux imports\r\nimport store from '../store';\r\nimport { swap, replace, changeBarState, setSimulationRunning, setSubList, mergeSublist }  from '../actions'\r\n// Algoritm imports\r\nimport { getSelectionSortAnimations }   from '../sortingAlgorithms/selectionSort.js';\r\nimport { getBubbleSortAnimations }      from '../sortingAlgorithms/bubbleSort.js';\r\nimport { getInsertionSortAnimations }   from '../sortingAlgorithms/insertionSort.js';\r\nimport { getMergeSortAnimations }       from '../sortingAlgorithms/mergeSort.js';\r\nimport { getQuickSortAnimations }       from '../sortingAlgorithms/quickSort.js';\r\nimport { getHeapSortAnimations }        from '../sortingAlgorithms/heapSort.js';\r\nimport { getCountingSortAnimations }    from '../sortingAlgorithms/countingSort.js';\r\n\r\n// Animation state enum used to determine what action to dispatch as well as the animation state of bars\r\nexport const AnimationState = Object.freeze({\r\n    \"NORMAL\": 0,    \"SELECT\": 1,    \"SWAP\": 2,\r\n    \"REPLACE\": 3,   \"MARKED\": 4,    \"SORTED\": 5,\r\n    \"SETSUBLIST\": 6,\"MERGESUBLIST\": 7\r\n});\r\n\r\n// Used to store current store value states\r\nlet simRunning = false;\r\nlet animationSpeed = 1000;\r\n\r\n/* startSorting\r\n * -------------------------------------------------------------\r\n * Runs a sorting algorithm and sends the animations created by\r\n * the sorting algorithm for dispatch (redux).\r\n * -------------------------------------------------------------\r\n * Input:    (algorithmName): The name of the sorting algorithm\r\n *              to run\r\n *           (dispatch): Dispatch function to dispatch actions\r\n * Output:   None\r\n */\r\nexport function startSorting(algorithmName, dispatch) {\r\n    let displayArray = store.getState().displayArray;\r\n    let array = displayArray.array.map((item) => {\r\n        return item.value;\r\n    });\r\n    let algorithmInput = array;\r\n    let sortingFunction = null;\r\n    switch(algorithmName) {\r\n        case \"Selection Sort\":\r\n            sortingFunction = getSelectionSortAnimations;\r\n            break;\r\n        case \"Bubble Sort\":\r\n            sortingFunction = getBubbleSortAnimations;\r\n            break;\r\n        case \"Insertion Sort\":\r\n            sortingFunction = getInsertionSortAnimations;\r\n            break;\r\n        case \"Merge Sort\":\r\n            sortingFunction = getMergeSortAnimations;\r\n            break;\r\n        case \"Quick Sort\":\r\n            sortingFunction = getQuickSortAnimations;\r\n            break;\r\n        case \"Heap Sort\":\r\n            sortingFunction = getHeapSortAnimations;\r\n            break;\r\n        case \"Counting Sort\":\r\n            sortingFunction = getCountingSortAnimations;\r\n            algorithmInput = {\r\n                array: array,\r\n                maxValue: displayArray.maxValue\r\n            };\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    // Run the sorting algorithm to get the animations\r\n    simRunning = true;\r\n    let animations = sortingFunction(algorithmInput);\r\n    // Subscribe to relevant redux store variables\r\n    animationSpeed = store.getState().animationSpeed;\r\n    const unsubscribeListener = store.subscribe(() => {\r\n        if (store.getState().simulationRunning === false) {\r\n            simRunning = false;\r\n        } \r\n        if (store.getState().animationSpeed !== animationSpeed) {\r\n            animationSpeed = store.getState().animationSpeed;\r\n        }\r\n    });\r\n    // Run the animations (send reversed array to be able to use pop instead of shift for performance.)\r\n    animate(animations.reverse(), unsubscribeListener, dispatch);\r\n}\r\n\r\n/* animate\r\n * -------------------------------------------------------------\r\n * Runs the animations by dispatching them with a timer.\r\n * -------------------------------------------------------------\r\n * Input:    (animations): Array of animations prepared for dispatch\r\n *           (unsubscribeListener): Used to listen if the user\r\n *              wants to stop the animations or not\r\n *           (dispatch): Dispatch function to dispatch actions\r\n * Output:   None (dispatches animations)\r\n */\r\nfunction animate(animations, unsubscribeListener, dispatch) {\r\n    // Basecase\r\n    if (animations.length === 0 || simRunning === false) {\r\n        dispatch(setSimulationRunning(false));\r\n        unsubscribeListener();\r\n        return;\r\n    }\r\n    // Dispatch animation(s)\r\n    const animation = animations.pop();\r\n    switch(animation.animationState) {\r\n        case AnimationState.NORMAL:\r\n        case AnimationState.SELECT:\r\n        case AnimationState.MARKED:\r\n        case AnimationState.SORTED:\r\n            dispatch(changeBarState(animation));\r\n            break;\r\n        case AnimationState.SWAP:          \r\n            dispatch(swap(animation));\r\n            break;\r\n        case AnimationState.REPLACE:\r\n            dispatch(replace(animation));\r\n            break;\r\n        case AnimationState.SETSUBLIST:     \r\n            dispatch(setSubList(animation));\r\n            break;\r\n        case AnimationState.MERGESUBLIST:        \r\n            dispatch(mergeSublist(animation));\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    // Set a timer to call the method again\r\n    setTimeout(() => {\r\n        animate(animations, unsubscribeListener, dispatch);\r\n    }, animationSpeed);       \r\n}","/* ***********************************************************************\r\n * arrayGenerator.js\r\n * -----------------------------------------------------------------------\r\n * Used to create display arrays and dispatch them to redux store.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { setDisplayArray } from '../actions'\r\n\r\nimport { AnimationState } from './animator';\r\n\r\n// Array type enum\r\nexport const ArrayType = Object.freeze({\r\n    \"NONE\": 0,      //< No type set.\r\n    \"RANDOM\": 1,    //< Values are generated randomly.\r\n    \"SEQUENCE\": 2   //< Values are generated in sequence, then shuffled.\r\n});\r\n\r\n/* generateNewArray\r\n * -------------------------------------------------------------\r\n * Generates a new display array and dispatches it.\r\n * -------------------------------------------------------------\r\n * Input:    (min): Minimum value that can be generated\r\n *           (max): Maximum value that can be generated\r\n *           (amount): Amount of values to generate\r\n *           (arrayType): What kind of array to generate\r\n *           (dispatch): Used to dispatch actions\r\n * Output:   None (dispatches the resulting array)\r\n */\r\nexport function generateNewArray(min, max, amount, arrayType=ArrayType.RANDOM, dispatch) {\r\n    const newArray = [];\r\n    switch(arrayType) {\r\n        case ArrayType.RANDOM:\r\n            for (let i = 0; i < amount; i++) {\r\n                newArray.push({ \r\n                    value: generateRandomInt(min, max),\r\n                    state: AnimationState.NORMAL \r\n                });\r\n            }\r\n            break;\r\n        case ArrayType.SEQUENCE:\r\n            for (let i = 0; i < amount; i++) {\r\n                if (min + i >= max) { break; }\r\n                newArray.push({\r\n                    value: min + i,\r\n                    state: AnimationState.NORMAL\r\n                });\r\n            }\r\n            shuffleArray(newArray);\r\n            break;\r\n        default:\r\n            newArray.push({\r\n                value: 0, \r\n                state: AnimationState.NORMAL\r\n            });\r\n            break;\r\n    }\r\n    dispatch(setDisplayArray(newArray, arrayType, min, max));\r\n}\r\n\r\n/* generateRandomInt\r\n * -------------------------------------------------------------\r\n * Used in order to generate a random integer between \r\n * minValue(inclusive) and maxValue(inclusive).\r\n * -------------------------------------------------------------\r\n * Input:    (minValue): The minimum number that can be generated\r\n *           (maxValue): The maximum number that can be generated\r\n * Output:   A random integer between minValue and maxValue\r\n */\r\nfunction generateRandomInt(minValue, maxValue) {\r\n    minValue = Math.ceil(minValue);\r\n    maxValue = Math.floor(maxValue);\r\n    return Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;\r\n}\r\n\r\n/* shuffleArray\r\n * -------------------------------------------------------------\r\n * Shuffles an array of integers.\r\n * -------------------------------------------------------------\r\n * Input:    (array): The array to shuffle\r\n * Output:   None (shuffles array by reference)\r\n */\r\nfunction shuffleArray(array) {\r\n    for(let i = array.length - 1; i > 0; i--) {\r\n        const swap = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[swap]] = [array[swap], array[i]];\r\n    }\r\n}","/* ***********************************************************************\r\n * index.js (reducers/displayArray)\r\n * -----------------------------------------------------------------------\r\n * File containing a reducer used for changing / modifying the \r\n * \"display array\".\r\n * The display array is used for visualization of the sorting algorithms\r\n * and contains relevant data about how they should be displayed.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { AnimationState } from '../../helpers/animator';\r\nimport { ArrayType } from '../../helpers/arrayGenerator'\r\n\r\nimport { \r\n    SET_DISPLAY_ARRAY,\r\n    CHANGE_BAR_STATE,\r\n    SWAP,\r\n    REPLACE,\r\n    SET_SUBLIST,\r\n    MERGE_SUBLIST,\r\n} from '../../actions/displayArray';\r\n\r\n// Initial state\r\nconst INITIAL_STATE = (\r\n    {\r\n        // The actual array containining data for a bar\r\n        array:  [\r\n                    { // Example of an element\r\n                        // The primary value that the bar has\r\n                        value: 0,\r\n                        // The current state of the bar (determines the render color)\r\n                        state: AnimationState.NORMAL,\r\n                        // If the bar should be rendered partially, i.e., represents\r\n                        // two values at the same time (useful for displaying sublists)\r\n                        isSublist: false,\r\n                        // The sublist value, used if isSublist is set to true\r\n                        sublistValue: 0\r\n                    }\r\n                ],\r\n        // The type of the array (if values are 1, 2, 3, ..., n or random values between minValue and maxValue)\r\n        type: ArrayType.RANDOM,\r\n        // The minimum value that the array contains\r\n        minValue: 0,\r\n        // The maximum value that the array contains\r\n        maxValue: 0\r\n    }\r\n);\r\n\r\n/* displayArrayReducer\r\n * -------------------------------------------------------------\r\n * Reducer for modifying the display array.\r\n * -------------------------------------------------------------\r\n * Input:    (displayArray): The display array\r\n *           (action): The action (payload of information)\r\n * Output:   object (see INITIAL_STATE) / payload\r\n */\r\nexport const displayArrayReducer = (displayArray = INITIAL_STATE, action)  => {\r\n    switch(action.type) {\r\n        case SET_DISPLAY_ARRAY:\r\n            return action.payload;\r\n        case CHANGE_BAR_STATE:\r\n            { // Expects { animationState: ?, data: [ind1, ind2, ...] }\r\n                let newArray = displayArray.array.slice();\r\n                for(let i = 0; i < action.payload.data.length; i++) {        \r\n                    newArray[action.payload.data[i]] = { \r\n                        value: newArray[action.payload.data[i]].value,\r\n                        state: action.payload.animationState,\r\n                        isSublist: newArray[action.payload.data[i]].isSublist,\r\n                        sublistValue: newArray[action.payload.data[i]].sublistValue\r\n                    };\r\n                }\r\n                return {\r\n                    array: newArray,\r\n                    type: displayArray.type,\r\n                    minValue: displayArray.minValue,\r\n                    maxValue: displayArray.maxValue\r\n                };\r\n            }\r\n        case SWAP:\r\n            { // Expects {animationState: ?, data: { indexOne: ?, indexTwo: ? }\r\n                let newArray = displayArray.array.slice();\r\n                const tmp = newArray[action.payload.data.indexOne];\r\n                newArray[action.payload.data.indexOne] = {\r\n                    value: newArray[action.payload.data.indexTwo].value,\r\n                    state: action.payload.animationState,\r\n                    isSublist: newArray[action.payload.data.indexTwo].isSublist,\r\n                    sublistValue: newArray[action.payload.data.indexTwo].sublistValue\r\n                };\r\n                newArray[action.payload.data.indexTwo] = {\r\n                    value: tmp.value,\r\n                    state: action.payload.animationState,\r\n                    isSublist: tmp.isSublist,\r\n                    sublistValue: tmp.sublistValue\r\n                };\r\n                return {\r\n                    array: newArray,\r\n                    type: displayArray.type,\r\n                    minValue: displayArray.minValue,\r\n                    maxValue: displayArray.maxValue\r\n                };\r\n            }\r\n        case REPLACE:\r\n            { // Expects { animationState: ?, data: { index: ?, value: ? }}\r\n                let newArray = [\r\n                    ...displayArray.array.slice(0, action.payload.data.index),\r\n                    { value: action.payload.data.value, state: action.payload.animationState },\r\n                    ...displayArray.array.slice(action.payload.data.index + 1)\r\n                ];\r\n                return {\r\n                    array: newArray,\r\n                    type: displayArray.type,\r\n                    minValue: displayArray.minValue,\r\n                    maxValue: displayArray.maxValue\r\n                };\r\n            }\r\n        case SET_SUBLIST:\r\n            { // Expects { animationState: ?, data: [ {index: ?, value: ?}, {index: ?, value: ?}] }\r\n                let newArray = displayArray.array.slice();\r\n                for(let i = 0; i < action.payload.data.length; i++) {        \r\n                    newArray[action.payload.data[i].index] = { \r\n                        value: newArray[action.payload.data[i].index].value,\r\n                        state: newArray[action.payload.data[i].index].state,\r\n                        isSublist: true,\r\n                        sublistValue: action.payload.data[i].value\r\n                    };\r\n                }\r\n                return {\r\n                    array: newArray,\r\n                    type: displayArray.type,\r\n                    minValue: displayArray.minValue,\r\n                    maxValue: displayArray.maxValue\r\n                };\r\n            }\r\n        case MERGE_SUBLIST:\r\n            { // Expects { animationState: ?, data: [ind1, ind2,...] }\r\n                let newArray = displayArray.array.slice();\r\n                for(let i = 0; i < action.payload.data.length; i++) {        \r\n                    newArray[action.payload.data[i]] = { \r\n                        value: newArray[action.payload.data[i]].sublistValue,\r\n                        state: newArray[action.payload.data[i]].state,\r\n                        isSublist: false,\r\n                        sublistValue: 0\r\n                    };\r\n                }\r\n                return {\r\n                    array: newArray, \r\n                    type: displayArray.type, \r\n                    minValue: displayArray.minValue, \r\n                    maxValue: displayArray.maxValue \r\n                };\r\n            }\r\n        default:\r\n            return displayArray;\r\n    }\r\n}","/* ***********************************************************************\r\n * index.js (reducers)\r\n * -----------------------------------------------------------------------\r\n * Combines all reducers.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\n// Reducers\r\nimport { algorithmsReducer } from './algorithms';\r\nimport { setAlgorithmReducer } from './setAlgorithm';\r\nimport { setSimulationRunning } from './setSimulationRunning';\r\nimport { displayArrayReducer } from './displayArray';\r\nimport { setAnimationSpeedReducer } from './setAnimationSpeed';\r\n\r\nexport default combineReducers({\r\n    algorithms: algorithmsReducer,\r\n    selectedAlgorithm: setAlgorithmReducer,\r\n    simulationRunning: setSimulationRunning,\r\n    displayArray: displayArrayReducer,\r\n    animationSpeed: setAnimationSpeedReducer  \r\n});","/* ***********************************************************************\r\n * index.js (reducers/setAlgorithm)\r\n * -----------------------------------------------------------------------\r\n * File containing a reducer used to define the current selected \r\n * sorting algorithm.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { \r\n    SET_ALGORITHM\r\n} from '../../actions/setAlgorithm';\r\n\r\nconst INITIAL_STATE = (null);\r\n\r\n/* setAlgorithmReducer\r\n * -------------------------------------------------------------\r\n * Reducer used to define the current selected \r\n * sorting algorithm.\r\n * -------------------------------------------------------------\r\n * Input:    (selectedAlgorithm): The algorithm to set\r\n *           (action): The action (payload of information)\r\n * Output:   selectedAlgorithm / payload\r\n */\r\nexport const setAlgorithmReducer = (selectedAlgorithm = INITIAL_STATE, action) => {\r\n    if (action.type === SET_ALGORITHM) {\r\n        return action.payload;\r\n    }\r\n    return selectedAlgorithm;\r\n};","/* ***********************************************************************\r\n * index.js (reducers/setSimulationRunning)\r\n * -----------------------------------------------------------------------\r\n * File containing a reducer used to define if the simulation is running \r\n * or not.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport {\r\n    CHANGE_SIMULATION_STATE\r\n} from '../../actions/setSimulationRunning';\r\n\r\nconst INITIAL_STATE = false;\r\n\r\n/* setSimulationRunning (reducer)\r\n * -------------------------------------------------------------\r\n * Reducer used for managing if the simulation is running.\r\n * -------------------------------------------------------------\r\n * Input:    (simulationRunning): bool if the simulation is \r\n *              running or not\r\n * Output:   simulationRunning / payload\r\n */\r\nexport const setSimulationRunning = (simulationRunning = INITIAL_STATE, action) => {\r\n    if (action.type === CHANGE_SIMULATION_STATE) {\r\n        return action.payload;\r\n    }\r\n    return simulationRunning;\r\n};","/* ***********************************************************************\r\n * index.js (reducers/setAnimationSpeed)\r\n * -----------------------------------------------------------------------\r\n * File containing a reducer used to manage the animation speed (in ms).\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport {\r\n    SET_ANIMATION_SPEED\r\n} from '../../actions/setAnimationSpeed';\r\n\r\nconst INITIAL_STATE = (0);\r\n\r\n/* setAnimationSpeedReducer\r\n * -------------------------------------------------------------\r\n * Reducer used to manage the animation speed (in ms).\r\n * -------------------------------------------------------------\r\n * Input:    (animationSpeed): The animation speed in ms\r\n *           (action): The action (payload of information)\r\n * Output:   animationSpeed / payload\r\n */\r\nexport const setAnimationSpeedReducer = (animationSpeed = INITIAL_STATE, action)  => {\r\n    if (action.type === SET_ANIMATION_SPEED) {\r\n        return action.payload;\r\n    }\r\n    return animationSpeed;\r\n}","/* ***********************************************************************\r\n * store.js\r\n * -----------------------------------------------------------------------\r\n * Contains the persistent redux store.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\n// Create and export the store\r\nconst store = createStore(reducers);\r\nexport default store;","/* ***********************************************************************\r\n * settings-bar.js\r\n * -----------------------------------------------------------------------\r\n * Component used to manage the settings bar in the application.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setAlgorithm, setSimulationRunning, setAnimationSpeed } from '../../actions';\r\nimport './settings-bar.css';\r\n// Helpers\r\nimport { startSorting } from '../../helpers/animator';\r\nimport { generateNewArray, ArrayType } from '../../helpers/arrayGenerator';\r\n\r\n// Number constants (maybe change to max 600, min 20)\r\nconst MAX_GENERATED_NUMBER = 700;\r\nconst MIN_GENERATED_NUMBER_RANDOM = 20;\r\nconst MIN_GENERATED_NUMBER_SEQUENCE = 5;\r\n// The animation speed (in ms)\r\nconst MIN_ANIMATION_SPEED = 1000;\r\nconst MAX_ANIMATION_SPEED = 1;\r\n// Amount of bars / values to use\r\nconst MIN_AMOUNT_BARS = 4;\r\nconst MAX_AMOUNT_BARS = 400;\r\n\r\nclass SettingsBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // Amount of bars / values that are generated when a new array is created\r\n            amountBars: 60,\r\n            selectedAlg: \"Selection Sort\"\r\n        };\r\n    }\r\n\r\n   /* componentDidMount\r\n    * -------------------------------------------------------------\r\n    * Used for some initialization.\r\n    * (invoked immediately after the component is mounted)\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   None\r\n    */\r\n    componentDidMount() {\r\n        this.props.setAlgorithm(this.props.algorithms[0]);\r\n        this.props.setAnimationSpeed(MAX_ANIMATION_SPEED);\r\n        generateNewArray(MIN_GENERATED_NUMBER_RANDOM, MAX_GENERATED_NUMBER\r\n            , this.state.amountBars, ArrayType.RANDOM, this.props.dispatch);\r\n    }\r\n\r\n    /* \r\n     * Handlers for sliders\r\n     */\r\n    handleOnChangeBars = (e) => { \r\n        this.setState({amountBars: e.target.value});   \r\n    }\r\n    handleInputOnBlurBars = (e) => {\r\n        this.setState({\r\n            amountBars: e.target.value > MAX_AMOUNT_BARS ? MAX_AMOUNT_BARS:\r\n                        e.target.value < MIN_AMOUNT_BARS ? MIN_AMOUNT_BARS: \r\n                        e.target.value\r\n        });\r\n    }\r\n    handleOnChangeSpeed = (e) => {\r\n        this.props.setAnimationSpeed(e.target.value);   \r\n    }\r\n    handleInputOnBlurSpeed = (e) => {\r\n        this.props.setAnimationSpeed(\r\n            e.target.value < MAX_ANIMATION_SPEED ? MAX_ANIMATION_SPEED:\r\n            e.target.value > MIN_ANIMATION_SPEED ? MIN_ANIMATION_SPEED:\r\n            e.target.value\r\n        ); \r\n    }\r\n\r\n    /*\r\n     * Handlers for dropdowns\r\n     */\r\n    handleOnChangeAlgorithm = (e) => {\r\n        for(let i = 0; i < this.props.algorithms.length; i++) {\r\n            if(this.props.algorithms[i].name === e.target.value) {\r\n                this.props.setAlgorithm(this.props.algorithms[i]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n   /* start\r\n    * -------------------------------------------------------------\r\n    * Starts sorting the current array with numbers with the \r\n    * currently selected sorting algorithm.\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   None\r\n    */\r\n    start() {\r\n        this.props.setSimulationRunning(true);\r\n        startSorting(this.props.selectedAlgorithm.name, this.props.dispatch);\r\n    }\r\n\r\n   /* stop\r\n    * -------------------------------------------------------------\r\n    * Used to stop the animations / sorting if it is running.\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   None\r\n    */\r\n    stop() {\r\n        this.props.setSimulationRunning(false);\r\n        generateNewArray(MIN_GENERATED_NUMBER_RANDOM, MAX_GENERATED_NUMBER\r\n            , this.state.amountBars, ArrayType.RANDOM, this.props.dispatch)\r\n    }\r\n\r\n   /* render\r\n    * -------------------------------------------------------------\r\n    * Renders the component\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   JSX\r\n    */\r\n    render() {\r\n        return(\r\n            <div id=\"settingsbar\">\r\n                <div id=\"settingsbar-top\">\r\n                    <Slider className=\"slider bars\"\r\n                        text=\"Bars\"\r\n                        disabled={this.props.simulationRunning === true ? true : false}\r\n                        min={MIN_AMOUNT_BARS}\r\n                        max={MAX_AMOUNT_BARS}\r\n                        value={this.state.amountBars}\r\n                        blur={this.handleInputOnBlurBars}\r\n                        change={this.handleOnChangeBars}>\r\n                    </Slider>\r\n                    <SettingsButton\r\n                        text=\"Random\"\r\n                        disabled={this.props.simulationRunning === true ? true : false}\r\n                        passedFunction={() => generateNewArray(MIN_GENERATED_NUMBER_RANDOM, MAX_GENERATED_NUMBER\r\n                                                , this.state.amountBars, ArrayType.RANDOM, this.props.dispatch)}>\r\n                    </SettingsButton>\r\n                    <SettingsButton\r\n                        text=\"Random Sequence\"\r\n                        disabled={this.props.simulationRunning === true ? true : false}\r\n                        passedFunction={() => generateNewArray(MIN_GENERATED_NUMBER_SEQUENCE, MAX_GENERATED_NUMBER\r\n                                                , this.state.amountBars, ArrayType.SEQUENCE, this.props.dispatch)}>\r\n                    </SettingsButton>\r\n                    {this.renderDropdown()}\r\n                </div>\r\n                <div className=\"divider-horizontal\"></div>\r\n                <div id=\"settingsbar-bottom\">\r\n                    <Slider className=\"slider speed\"\r\n                        text=\"Speed\"\r\n                        min={MAX_ANIMATION_SPEED}\r\n                        max={MIN_ANIMATION_SPEED}\r\n                        value={this.props.animationSpeed}\r\n                        blur={this.handleInputOnBlurSpeed}\r\n                        change={this.handleOnChangeSpeed}>\r\n                    </Slider>\r\n                    <SettingsButton\r\n                        text={<i className=\"far fa-play-circle\" >Start</i>}\r\n                        disabled={this.props.simulationRunning === true ? true : false}\r\n                        passedFunction={() => this.start()}>\r\n                    </SettingsButton>\r\n                    <SettingsButton\r\n                        text={<i className=\"far fa-stop-circle\">Stop</i>}\r\n                        disabled={this.props.simulationRunning === true ? false : true}\r\n                        passedFunction={() => this.stop()}>\r\n                    </SettingsButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n   /* renderDropdown\r\n    * -------------------------------------------------------------\r\n    * Helps to render dropdowns.\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   A dropdown (JSX)\r\n    */\r\n    renderDropdown() {\r\n        const opts = this.props.algorithms.map((algorithm) => { \r\n            return <option key={algorithm.name} value={algorithm.name}>{algorithm.name}</option>\r\n        });\r\n        return (\r\n            <div className=\"settings-item-container\">\r\n                <select className=\"dropdown\" onChange={this.handleOnChangeAlgorithm}>\r\n                        {opts}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/* Slider\r\n * -------------------------------------------------------------\r\n * Used to create a slider with an input box.\r\n * -------------------------------------------------------------\r\n * Input:    (props): The properties of the slider\r\n * Output:   A slider (JSX)\r\n */\r\nfunction Slider(props) {\r\n    return(\r\n        <div className=\"settings-item-container\">\r\n            <div className=\"slider-text\">{props.text}</div>\r\n            <input\r\n                type=\"range\"\r\n                className={props.className}\r\n                disabled={props.disabled}\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.value}\r\n                onChange={props.change}/>\r\n            <input \r\n                type=\"number\" \r\n                className=\"slider-input-box\" \r\n                min={props.min} \r\n                max={props.max} \r\n                value={props.value}\r\n                onBlur={props.blur}\r\n                onKeyDown={e => e.key === 'Enter' ? e.target.blur(): false}\r\n                onChange={props.change}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n/* SettingsButton\r\n * -------------------------------------------------------------\r\n * Used to create a settings button.\r\n * -------------------------------------------------------------\r\n * Input:    (props): The properties of the settings button\r\n * Output:   A settings button (JSX)\r\n */\r\nfunction SettingsButton(props) {\r\n    return(\r\n        <div className=\"settings-item-container\">\r\n            <button className=\"settings-button\"\r\n                onClick={props.passedFunction}\r\n                disabled={props.disabled}\r\n                style={{borderBottom: props.borderBottom}}>\r\n                    {props.text}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n/****************************************\r\n * REDUX MANAGEMENT BELOW \r\n ****************************************/\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        algorithms: state.algorithms,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        simulationRunning: state.simulationRunning,\r\n        animationSpeed: state.animationSpeed\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            setAlgorithm,\r\n            setSimulationRunning,\r\n            setAnimationSpeed},\r\n        dispatch)\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsBar);","/* ***********************************************************************\r\n * visualizer.js\r\n * -----------------------------------------------------------------------\r\n * This component is responsible for rendering the visual display of the\r\n * sorting algorithms.\r\n * -----------------------------------------------------------------------\r\n * Author:      Jonas Nilsson\r\n * Version:     1.0\r\n * Date:        2020-07-27\r\n * ***********************************************************************/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './visualizer.css';\r\nimport { AnimationState } from '../../helpers/animator';\r\nimport { ArrayType } from '../../helpers/arrayGenerator';\r\n\r\n// Constant default colors\r\nconst COLOR_DEFAULT     = \"rgb(128, 229, 255)\";\r\nconst COLOR_SELECTED    = \"rgb(255, 51, 0)\";\r\nconst COLOR_SWAPPED     = \"rgb(153, 255, 153)\";\r\nconst COLOR_REPLACE     = \"rgb(153, 255, 153)\";\r\nconst COLOR_MOVE        = \"rgb(217, 102, 255)\";\r\nconst COLOR_MARKED      = \"rgb(166, 77, 255)\";\r\nconst COLOR_SORTED      = \"rgb(0, 204, 102)\";\r\nconst COLOR_SUBLIST     = \"rgb(0, 163, 204)\";\r\n\r\n// Display mode enum used for ways to display the bars\r\nconst DisplayMode = Object.freeze({\r\n    \"NONE\": 0,      //< Not set\r\n    \"UP\": 1,        //< Bars from bottom -> top\r\n    \"CENTER\": 2,    //< Bars centered\r\n    \"DOWN\": 3       //< Bars from top -> bottom\r\n});\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayMode: DisplayMode.UP\r\n        };\r\n    }\r\n\r\n   /* render\r\n    * -------------------------------------------------------------\r\n    * Renders the component.\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   None\r\n    */\r\n    render() {\r\n        return(\r\n            <div id=\"visualizer-container\">\r\n                <div id=\"bar-container\" style={\r\n                    this.state.displayMode === DisplayMode.UP ? {alignItems: \"flex-end\"} :\r\n                    this.state.displayMode === DisplayMode.CENTER ? {alignItems: \"center\"} :\r\n                    this.state.displayMode === DisplayMode.DOWN ? {alignItems: \"flex-start\"} : {alignItems: \"flex-end\"}}>\r\n                    { this.renderArrayElements() }\r\n                </div>\r\n                <div id=\"visualizer-button-container\">\r\n                    <button className=\"visualizer-button\" onClick={() => this.setState({displayMode: DisplayMode.UP})}>\r\n                        <i className=\"fas fa-2x fa-chevron-up\"></i>\r\n                    </button>\r\n                    <button className=\"visualizer-button\" onClick={() => this.setState({displayMode: DisplayMode.CENTER})}>\r\n                        <i className=\"fas fa-2x fa-compress-alt\"></i>\r\n                    </button>\r\n                    <button className=\"visualizer-button\" onClick={() => this.setState({displayMode: DisplayMode.DOWN})}>\r\n                        <i className=\"fas fa-2x fa-chevron-down\"></i>\r\n                    </button>           \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n   /* renderArrayElements\r\n    * -------------------------------------------------------------\r\n    * Sub-method used to render all array bars that are \r\n    * used / changed to display sorting.\r\n    * -------------------------------------------------------------\r\n    * Input:    None\r\n    * Output:   None\r\n    */\r\n    renderArrayElements() {\r\n        const arrayLength = this.props.displayArray.array.length;\r\n        const barMargin = arrayLength < 100 ? 1: 0;\r\n        const barWidth = 100 / arrayLength;\r\n        const barHeighMultiplier = \r\n            this.props.displayArray.type === ArrayType.SEQUENCE ? (100 / (arrayLength + this.props.displayArray.minValue)) :\r\n            this.props.displayArray.type === ArrayType.RANDOM ? (100 / this.props.displayArray.maxValue) :\r\n            (100 / arrayLength);\r\n        const styleAlignItems = this.state.displayMode === DisplayMode.UP ? 'flex-start':\r\n            this.state.displayMode === DisplayMode.CENTER ? 'center':\r\n            this.state.displayMode === DisplayMode.DOWN ? 'flex-end': 'flex-start';\r\n        return this.props.displayArray.array.map((obj, index) => {\r\n            const bg =  obj.state === AnimationState.SELECT ? COLOR_SELECTED : \r\n                        obj.state === AnimationState.SWAP ? COLOR_SWAPPED : \r\n                        obj.state === AnimationState.REPLACE ? COLOR_REPLACE :\r\n                        obj.state === AnimationState.MOVE ? COLOR_MOVE : \r\n                        obj.state === AnimationState.MARKED ? COLOR_MARKED : \r\n                        obj.state === AnimationState.SORTED ? COLOR_SORTED : COLOR_DEFAULT;\r\n            const barStyle = { \r\n                width:          `${barWidth}%`,\r\n                height:         `${barHeighMultiplier * obj.value}%`,\r\n                marginLeft:     `${barMargin}px`,\r\n                marginRight:    `${barMargin}px`,\r\n                backgroundColor: bg,\r\n                alignItems:      styleAlignItems\r\n            };\r\n            if (obj.isSublist) {\r\n                let gradient = \"linear-gradient(to top, \";\r\n                // Extra and value default as 100% of the bar being the sublist\r\n                let extra = COLOR_SUBLIST + \"0%, \" + COLOR_SUBLIST + \"100%)\";\r\n                // Percentage of the bar that should be colored as a sublist\r\n                const subListPercentage = obj.sublistValue >= obj.value ? 100 : (obj.sublistValue / obj.value) * 100;\r\n                if (subListPercentage !== 100) {\r\n                    switch(this.state.displayMode) {\r\n                        case DisplayMode.UP:\r\n                            extra = COLOR_SUBLIST + \"0%, \" + COLOR_SUBLIST + (subListPercentage) + \"%, \" +\r\n                                    bg + (subListPercentage) + \"%, \" + bg + \"100%)\";\r\n                            break;\r\n                        case DisplayMode.CENTER:\r\n                            let sublistHalf = (100 - subListPercentage) / 2;\r\n                            extra = bg + \"0%, \" + bg + sublistHalf + \"%, \" +\r\n                                    COLOR_SUBLIST + sublistHalf + \"%, \" + COLOR_SUBLIST + (100 - sublistHalf) + \"%, \" +\r\n                                    bg + (1 - subListPercentage) + \"%, \" + bg + \"100%)\";\r\n                            break;\r\n                        case DisplayMode.DOWN:\r\n                            extra = bg + \"0%, \" + bg + (100 - subListPercentage) + \"%, \" + \r\n                                    COLOR_SUBLIST + (100 - subListPercentage) + \"%, \" + COLOR_SUBLIST + \"100%)\";\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                } else {\r\n                    barStyle['height'] = `${barHeighMultiplier * obj.sublistValue}%`;\r\n                }\r\n                gradient += extra;\r\n                barStyle['backgroundImage'] = gradient;\r\n            }\r\n            return(\r\n                <div className=\"bar-value\"\r\n                    key={index}\r\n                    style={barStyle}>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n/****************************************\r\n * REDUX MANAGEMENT BELOW \r\n ****************************************/\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        displayArray: state.displayArray\r\n    };\r\n}\r\nexport default connect(mapStateToProps, {\r\n})(Visualizer);","/* ***********************************************************************\n * App.js\n * -----------------------------------------------------------------------\n * The app component.\n * -----------------------------------------------------------------------\n * Author:      Jonas Nilsson\n * Version:     1.0\n * Date:        2020-07-27\n * ***********************************************************************/\n\nimport React from 'react';\n\nimport './App.css';\nimport SettingsBar from './components/settings-bar/settings-bar';\nimport Visualizer from './components/visualizer/visualizer';\n\nconst App = () => {\n  return(\n    <div className=\"App\">\n      <SettingsBar></SettingsBar>\n      <Visualizer></Visualizer>\n    </div>\n  );\n};\nexport default App;","/* ***********************************************************************\n * index.js\n * -----------------------------------------------------------------------\n * Handles app startup.\n * -----------------------------------------------------------------------\n * Author:      Jonas Nilsson\n * Version:     1.0\n * Date:        2020-07-27\n * ***********************************************************************/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}